{"version":3,"sources":["GuessRow.js","Functions.js","App.js","reportWebVitals.js","index.js"],"names":["GuessRow","props","className","index","guess","bulls","cows","randomValue","num","vals","length","Math","floor","random","includes","push","emptyBoard","App","useState","answer","setAnswer","guessHistory","setGuessHistory","curGuess","setCurGuess","paused","setPaused","i","curGuessNum","split","forEach","a","q","bullsAndCows","newArr","putIn","join","reset","map","type","value","onKeyDown","ev","key","onChange","guessSet","Set","target","uniqueArr","filter","c","isNaN","maxLength","disabled","onClick","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbd06a07.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function GuessRow(props) {\n    return (\n        <div className=\"HistoryRow\">\n            <div className=\"Yellow Number Cell\">{props.index + 1}</div>\n            <div className=\"Cell\">{props.guess.guess}</div>\n            <div className={props.guess.bulls === \"4\" ? \"Red Cell\" : \"Cell\"}>{props.guess.bulls}</div>\n            <div className=\"Cell\">{props.guess.cows}</div>\n        </div>\n    )\n}\n","\n// Generate a list of 4 random ints [0, 9] where no digits are repeated\n// returns [\"#\", \"#\", \"#\", \"#\"]\nexport function randomValue() {\n\n    let vals = [];\n  \n    var num;\n    while(vals.length < 4) {\n        num = Math.floor(Math.random() * 10) + '';\n        if (!vals.includes(num)) {\n            vals.push(num);\n        }\n    }\n    return vals;\n}\n\n// calculate the correct number of bulls and cows for a guess\n// returns [\"#\", \"#\"]\nexport function bullsAndCows(answer, guess) {\n    guess = guess.split('');\n\n    var i;\n    let bulls = 0;\n    let cows = 0;\n\n    answer.forEach(a => {\n        guess.forEach(q => {\n            if (q === a) {\n                ++cows;\n            }\n        });\n    });\n\n    for (i = 0; i < 4; ++i) {\n        if (answer[i] === guess[i]) {\n            ++bulls;\n            --cows;\n        }\n    }\n\n    return [bulls + '', cows + '']\n}\n\n// Generates an empty game board\nexport function emptyBoard() {\n    return [\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null},\n      {guess: null, bulls: null, cows: null}\n    ];\n  }","import './App.css';\nimport { useState } from 'react';\nimport GuessRow from './GuessRow';\nimport { randomValue, bullsAndCows, emptyBoard } from './Functions';\n\nfunction App() {\n\n  // answer: [\"#\", \"#\", \"#\", \"#\"], guess this to win!\n  const [answer, setAnswer] = useState(randomValue);\n  // guessHistory: [{guess: \"\", bulls: \"\", cows: \"\"}] * 8, stores the guess data for one game\n  const [guessHistory, setGuessHistory] = useState(emptyBoard);\n  // curGuess: \"\", stores the correct value of the text/input field\n  const [curGuess, setCurGuess] = useState('');\n  // paused: bool, whether or not user input should be accepted\n  const [paused, setPaused] = useState(false);\n\n  // called when the user presses enter or \"guess\"\n  // does nothing if paused\n  // does nothing if the guess is not 4 digits long\n  // determines bulls and cows\n  // sets guessHistory to the new correct state\n  // determines if game is over\n  function guess() {\n    if (paused) {\n      return\n    }\n\n    if (curGuess.length !== 4) {\n      return\n    }\n\n    let [bulls, cows] = bullsAndCows(answer, curGuess);\n\n  \n    let newArr = [...guessHistory];\n\n    let putIn = false;\n    var i, curGuessNum;\n    for (i = 0; i < 8; ++i) {\n      if ((newArr[i].guess === null) && !(putIn)) {\n        newArr[i].guess = curGuess;\n        newArr[i].bulls = bulls;\n        newArr[i].cows = cows;\n        putIn = true;\n        curGuessNum = i + 1;\n      }\n    }\n\n    if (bulls === '4') {\n      setPaused(true);\n      setCurGuess('You Win!');\n    }\n    else if (curGuessNum > 7) {\n      setPaused(true);\n      setCurGuess('You Lose! Ans: ' + answer.join(''));\n    } else {\n      setCurGuess('');\n    }\n  \n    setGuessHistory(newArr);\n  }\n\n  // resets all states to a new game\n  function reset() {\n    setPaused(false);\n    setCurGuess('');\n    setGuessHistory(emptyBoard);\n    setAnswer(randomValue);\n  }\n\n  // checks if key pressed was enter, calls guess() if it was\n  function handleKeyPress(ev) {\n    if (paused) {\n      return\n    }\n    else if (ev.key === 'Enter') {\n      guess()\n    }\n  }\n\n  // filter out duplicate characters, filter out non-string chars.\n  // HANDLES FORCING NO DUPLICATE NUMBERS\n  function handleValueChange(ev) {\n    // filter duplicates\n    let guessSet = new Set(ev.target.value);\n    let uniqueArr = [...guessSet]\n    // filter out NaNs\n    uniqueArr.filter(c => {\n      return !isNaN(c);\n    });\n    \n    // set the curGuess (input value) to the filterd string \n    setCurGuess(uniqueArr.join(''));\n  }\n\n\n  return (\n    <>\n      <div className=\"MainContainer\">\n        <div className=\"HistoryContainer\">\n          <div className=\"HistoryRow\">\n            <div className=\"Red Number Cell\">\n              #\n            </div>\n            <div className=\"Red Cell\">\n              Guess\n            </div>\n            <div className=\"Red Cell\">\n              Bulls\n            </div>\n            <div className=\"Red Cell\">\n              Cows\n            </div>\n          </div>\n          {\n            guessHistory.map((guess, index) => (\n              <GuessRow key={index} index={index} guess={guess}/>\n            ))\n          }\n        </div>\n        <div className=\"GuessContainer\">\n          <input className=\"InputGuess\" type=\"text\" value={curGuess} onKeyDown={handleKeyPress} onChange={handleValueChange} maxLength=\"4\" disabled={paused? \"disabled\" : \"\"}/>\n          { paused ? \n            <button className=\"NewGame GuessButton\" onClick={reset}>Play Again</button>\n            :\n            <>\n              <button className=\"GuessButton\" onClick={guess}>Guess</button>\n              <button className=\"ResetButton\" onClick={reset}>Reset</button>\n            </>\n          }\n\n        </div>\n      </div>\n      <a className=\"Link\" href=\"http://swoogity.com\">Back to Home</a>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}